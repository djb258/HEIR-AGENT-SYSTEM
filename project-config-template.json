{
  "// PROJECT OVERVIEW": "=== FILL THIS OUT FIRST ===",
  "project_name": "Your project name here",
  "project_description": "What you want to build in 1-2 sentences",
  "project_type": "simple/medium/complex - See README examples",
  
  "// WHAT TO BUILD": "=== PROJECT REQUIREMENTS ===",
  "what_you_want": "Detailed description of what the end result should be",
  "success_looks_like": [
    "List specific outcomes that mean success",
    "e.g., 'Users can sign up and pay for subscriptions'",
    "e.g., 'System processes 1000 leads per hour'"
  ],
  "constraints": {
    "budget": "Any budget limits or cost considerations",
    "timeline": "When do you need this done?",
    "must_use_technologies": ["List any required tech/platforms"],
    "cannot_use": ["List any forbidden technologies"]
  },

  "// DPR SYSTEM INTEGRATION": "=== YOUR DOCTRINE SYSTEM ===",
  "dpr_system": {
    "unique_id_format": "[DB].[SUBHIVE].[MICROPROCESS].[TOOL].[ALTITUDE].[STEP]",
    "section_number_format": "[database].[subhive].[subsubhive].[section].[sequence]",
    "process_id_style": "Verb + Object (e.g., Load CSV, Generate Report)",
    "orbt_enabled": true,
    "orbt_protocol": "3_strike_escalation_with_institutional_knowledge",
    "schema_enforcement": "STAMPED/SPVPET/STACKED",
    "doctrine_enforcement_level": "strict",
    "institutional_knowledge_enabled": true,
    "cross_project_learning": true
  },

  "// SKYSCRAPER CONSTRUCTION AGENTS": "=== AGENT ACTIVATION (set to true for needed agents) ===",
  "agents_needed": {
    "// LEVEL 0: Meta-System (Always Required)": "",
    "master_orchestrator": {
      "use_this_agent": true,
      "role": "building_superintendent",
      "why": "Always needed - coordinates all domain orchestrators like a construction superintendent"
    },
    
    "system_orchestrator": {
      "use_this_agent": true,
      "role": "dpr_doctrine_enforcement",
      "why": "Always needed - enforces your DPR doctrine system across all agents"
    },

    "heir_claude_code_specialist": {
      "use_this_agent": true,
      "role": "claude_code_automation", 
      "why": "Always needed - automates all Claude Code operations and HEIR system setup"
    },

    "// LEVEL 1: Domain Orchestrators (Floor Managers)": "",
    
    "data_orchestrator": {
      "use_this_agent": false,
      "role": "data_floor_manager",
      "why": "Need databases, data storage, queries, or data processing",
      "specialists_managed": ["database-specialist", "api-specialist"],
      "what_to_build": "Describe data requirements (databases, schemas, data flows)"
    },
    
    "payment_orchestrator": {
      "use_this_agent": false,
      "role": "financial_floor_manager",
      "why": "Need payment processing, billing, or financial transactions",
      "specialists_managed": ["payment-specialist", "api-specialist"],
      "what_to_build": "Describe payment requirements (gateways, billing, compliance)"
    },
    
    "integration_orchestrator": {
      "use_this_agent": false,
      "role": "external_services_floor_manager",
      "why": "Need external APIs, web scraping, or third-party integrations",
      "specialists_managed": ["api-specialist", "scraper-specialist"],
      "what_to_integrate": "List external services/APIs needed"
    },
    
    "platform_orchestrator": {
      "use_this_agent": false,
      "role": "infrastructure_floor_manager",
      "why": "Need deployment, hosting, infrastructure, or monitoring",
      "specialists_managed": ["deployment-specialist", "monitoring-specialist"],
      "where_to_deploy": "Platform preferences (Render, Vercel, etc.)"
    },

    "// LEVEL 2: Specialist Library (Reusable Workforce - Assigned by Domain Orchestrators)": "",
    "specialist_assignments": {
      "note": "Specialists are assigned automatically by Domain Orchestrators based on needs",
      "database_specialist": {
        "auto_assigned_by": "data_orchestrator",
        "capabilities": "All database types, STAMPED/SPVPET/STACKED schema enforcement",
        "cross_project_reusability": "high"
      },
      "payment_specialist": {
        "auto_assigned_by": "payment_orchestrator", 
        "capabilities": "All payment gateways, PCI compliance, fraud detection",
        "cross_project_reusability": "high"
      },
      "api_specialist": {
        "auto_assigned_by": ["data_orchestrator", "payment_orchestrator", "integration_orchestrator"],
        "capabilities": "External API integration, authentication, rate limiting",
        "cross_project_reusability": "very_high"
      },
      "scraper_specialist": {
        "auto_assigned_by": "integration_orchestrator",
        "capabilities": "Ethical web scraping, anti-detection, data quality",
        "cross_project_reusability": "high"
      },
      "deployment_specialist": {
        "auto_assigned_by": "platform_orchestrator",
        "capabilities": "All hosting platforms, CI/CD, infrastructure as code",
        "cross_project_reusability": "very_high"
      },
      "monitoring_specialist": {
        "auto_assigned_by": "platform_orchestrator",
        "capabilities": "ORBT monitoring, real-time dashboards, predictive alerts",
        "cross_project_reusability": "maximum",
        "always_recommended": true
      },
      "communication_specialist": {
        "auto_assigned_by": ["payment_orchestrator", "platform_orchestrator"],
        "capabilities": "Email, SMS, push notifications, multi-channel orchestration",
        "cross_project_reusability": "high"
      },
      "ai_ml_specialist": {
        "auto_assigned_by": "integration_orchestrator",
        "capabilities": "AI API integration, cost optimization, safety implementation",
        "cross_project_reusability": "high"
      }
    }
  },

  "// TECHNICAL DETAILS": "=== FILL OUT FOR ACTIVE AGENTS ONLY ===",
  "technical_specs": {
    "// Only fill these if the corresponding agent is active above": "",
    
    "backend_details": {
      "database_schema": "Describe your data structure",
      "api_endpoints": ["List the APIs you need", "/api/users", "/api/payments"],
      "authentication": "How should users log in? (email/password, Google, etc.)"
    },
    
    "integration_details": {
      "external_apis": ["List external services", "OpenAI API", "SendGrid"],
      "data_flows": "How should data move between services?",
      "rate_limits": "Any API rate limit considerations?"
    },
    
    "deployment_details": {
      "hosting_platform": "Preferred platform (Render, Vercel, etc.)",
      "environment_variables": "List any env vars needed",
      "monitoring_needs": "What should be monitored?"
    },
    
    "database_details": {
      "tables_needed": ["users", "payments", "logs"],
      "relationships": "How are your data tables connected?",
      "performance_needs": "Any specific performance requirements?"
    },
    
    "payment_details": {
      "payment_types": ["one-time", "subscription", "usage-based"],
      "pricing_tiers": "Describe your pricing structure",
      "webhook_handling": "What should happen when payments succeed/fail?"
    },
    
    "scraping_details": {
      "target_websites": ["List websites to scrape"],
      "data_to_extract": "What specific data do you need?",
      "scraping_frequency": "How often should this run?",
      "ethical_limits": "Any scraping restrictions to follow?"
    },
    
    "monitoring_details": {
      "orbt_3_strike_protocol": {
        "strike_1_auto_fix": true,
        "strike_2_alternatives": true,
        "strike_3_human_escalation": true,
        "institutional_knowledge_integration": true
      },
      "dashboard_enabled": true,
      "error_log_retention": "30 days",
      "escalation_channels": ["slack", "email"],
      "orbt_compliance": true,
      "performance_tracking": true,
      "training_logs": true,
      "cross_project_learning": true
    },
    
    "institutional_knowledge_details": {
      "knowledge_capture_enabled": true,
      "pattern_recognition_enabled": true,
      "cross_project_learning_enabled": true,
      "solution_effectiveness_tracking": true,
      "automatic_solution_application_threshold": 0.8,
      "knowledge_validation_required": true
    }
  },

  "// AUTOMATIC - DON'T CHANGE": "=== SYSTEM FIELDS ===",
  "system": {
    "architecture_model": "skyscraper_construction",
    "entry_point": "master-orchestrator",
    "user_interface": "heir-claude-code-specialist",
    "doctrine_enforcement": "system-orchestrator",
    "orbt_protocol": "3_strike_escalation",
    "institutional_knowledge_enabled": true,
    "cross_project_learning": true,
    "auto_repair": true,
    "session_tracking": true,
    "heir_version": "2.0.0_skyscraper_model",
    "created_timestamp": "",
    "last_updated": ""
  }
}